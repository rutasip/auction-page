{"ast":null,"code":"import validateLogin from '../services/userLoginValidator';\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const USER_LOGIN_REQUEST = 'USER_LOGIN_REQUEST';\nexport const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS';\nexport const USER_LOGIN_ERROR = 'USER_LOGIN_ERROR';\n\nconst login = (email, password) => {\n  const request = user => ({\n    type: USER_LOGIN_REQUEST,\n    user\n  });\n\n  const success = user => ({\n    type: USER_LOGIN_SUCCESS,\n    user\n  });\n\n  const failure = error => ({\n    type: USER_LOGIN_ERROR,\n    error\n  });\n\n  return dispatch => {\n    dispatch(request(email));\n\n    if (validateLogin(email, password) === false) {\n      dispatch(failure('Neteisingi prisijungimo duomenys'));\n      return;\n    }\n\n    dispatch(success(email));\n  };\n};\n\nconst registerUser = id => {\n  return {\n    type: REGISTER_USER,\n    id\n  };\n};\n\nexport const userActions = {\n  login,\n  registerUser\n};","map":{"version":3,"sources":["/home/ruta/Documents/my_websites/auction/src/actions/user.actions.jsx"],"names":["validateLogin","REGISTER_USER","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_ERROR","login","email","password","request","user","type","success","failure","error","dispatch","registerUser","id","userActions"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,gCAA1B;AAEA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AAEP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;;AAEP,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACjC,QAAMC,OAAO,GAAGC,IAAI,KAAK;AAAEC,IAAAA,IAAI,EAAER,kBAAR;AAA4BO,IAAAA;AAA5B,GAAL,CAApB;;AACA,QAAME,OAAO,GAAGF,IAAI,KAAK;AAAEC,IAAAA,IAAI,EAAEP,kBAAR;AAA4BM,IAAAA;AAA5B,GAAL,CAApB;;AACA,QAAMG,OAAO,GAAGC,KAAK,KAAK;AAAEH,IAAAA,IAAI,EAAEN,gBAAR;AAA0BS,IAAAA;AAA1B,GAAL,CAArB;;AAEA,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACN,OAAO,CAACF,KAAD,CAAR,CAAR;;AAEA,QAAIN,aAAa,CAACM,KAAD,EAAQC,QAAR,CAAb,KAAmC,KAAvC,EAA8C;AAC5CO,MAAAA,QAAQ,CAACF,OAAO,CAAC,kCAAD,CAAR,CAAR;AACA;AACD;;AAEDE,IAAAA,QAAQ,CAACH,OAAO,CAACL,KAAD,CAAR,CAAR;AACD,GATD;AAUD,CAfD;;AAiBA,MAAMS,YAAY,GAAGC,EAAE,IAAI;AACzB,SAAO;AAAEN,IAAAA,IAAI,EAAET,aAAR;AAAuBe,IAAAA;AAAvB,GAAP;AACD,CAFD;;AAIA,OAAO,MAAMC,WAAW,GAAG;AACzBZ,EAAAA,KADyB;AAEzBU,EAAAA;AAFyB,CAApB","sourcesContent":["import validateLogin from '../services/userLoginValidator';\n\nexport const REGISTER_USER = 'REGISTER_USER';\n\nexport const USER_LOGIN_REQUEST = 'USER_LOGIN_REQUEST';\nexport const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS';\nexport const USER_LOGIN_ERROR = 'USER_LOGIN_ERROR';\n\nconst login = (email, password) => {\n  const request = user => ({ type: USER_LOGIN_REQUEST, user });\n  const success = user => ({ type: USER_LOGIN_SUCCESS, user });\n  const failure = error => ({ type: USER_LOGIN_ERROR, error });\n\n  return dispatch => {\n    dispatch(request(email));\n\n    if (validateLogin(email, password) === false) {\n      dispatch(failure('Neteisingi prisijungimo duomenys'));\n      return;\n    }\n\n    dispatch(success(email));\n  };\n};\n\nconst registerUser = id => {\n  return { type: REGISTER_USER, id };\n};\n\nexport const userActions = {\n  login,\n  registerUser\n};\n"]},"metadata":{},"sourceType":"module"}