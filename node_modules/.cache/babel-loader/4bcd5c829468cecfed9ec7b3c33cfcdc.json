{"ast":null,"code":"import userValidator from 'services/userValidator';\nexport const loginActions = {\n  REQUEST: 'USER_LOGIN_REQUEST',\n  SUCCESS: 'USER_LOGIN_SUCCESS',\n  ERROR: 'USER_LOGIN_ERROR',\n  LOGOUT: 'USER_LOGOUT'\n};\nexport const registerActions = {\n  REQUEST: 'USER_REGISTER_REQUEST',\n  SUCCESS: 'USER_REGISTER_SUCCESS',\n  ERROR: 'USER_REGISTER_ERROR'\n};\n\nconst logout = () => {\n  return {\n    type: loginActions.LOGOUT\n  };\n};\n\nconst login = (email, password) => {\n  const request = user => ({\n    type: loginActions.REQUEST,\n    user\n  });\n\n  const success = user => ({\n    type: loginActions.SUCCESS,\n    user\n  });\n\n  const failure = error => ({\n    type: loginActions.ERROR,\n    error\n  });\n\n  return dispatch => {\n    dispatch(request(email));\n\n    if (userValidator.validateLogin(email, password) === false) {\n      dispatch(failure('Neteisingi prisijungimo duomenys'));\n      return;\n    }\n\n    dispatch(success(email));\n  };\n};\n\nconst register = (email, password) => {\n  const request = user => ({\n    type: registerActions.REQUEST,\n    user\n  });\n\n  const success = user => ({\n    type: registerActions.SUCCESS,\n    user\n  });\n\n  const failure = error => ({\n    type: registerActions.ERROR,\n    error\n  });\n\n  return dispatch => {\n    dispatch(request(email));\n\n    if (userValidator.validateRegister(email, password) === false) {\n      dispatch(dispatch(failure('Laukai negali būti tušti')));\n      return;\n    }\n\n    dispatch(success(email));\n  };\n};\n\nexport const userActions = {\n  login,\n  register,\n  logout\n};","map":{"version":3,"sources":["/home/ruta/Documents/my_websites/auction/src/actions/user.actions.jsx"],"names":["userValidator","loginActions","REQUEST","SUCCESS","ERROR","LOGOUT","registerActions","logout","type","login","email","password","request","user","success","failure","error","dispatch","validateLogin","register","validateRegister","userActions"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,wBAA1B;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,OAAO,EAAE,oBADiB;AAE1BC,EAAAA,OAAO,EAAE,oBAFiB;AAG1BC,EAAAA,KAAK,EAAE,kBAHmB;AAK1BC,EAAAA,MAAM,EAAE;AALkB,CAArB;AAQP,OAAO,MAAMC,eAAe,GAAG;AAC7BJ,EAAAA,OAAO,EAAE,uBADoB;AAE7BC,EAAAA,OAAO,EAAE,uBAFoB;AAG7BC,EAAAA,KAAK,EAAE;AAHsB,CAAxB;;AAMP,MAAMG,MAAM,GAAG,MAAM;AACnB,SAAO;AAAEC,IAAAA,IAAI,EAAEP,YAAY,CAACI;AAArB,GAAP;AACD,CAFD;;AAIA,MAAMI,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACjC,QAAMC,OAAO,GAAGC,IAAI,KAAK;AAAEL,IAAAA,IAAI,EAAEP,YAAY,CAACC,OAArB;AAA8BW,IAAAA;AAA9B,GAAL,CAApB;;AACA,QAAMC,OAAO,GAAGD,IAAI,KAAK;AAAEL,IAAAA,IAAI,EAAEP,YAAY,CAACE,OAArB;AAA8BU,IAAAA;AAA9B,GAAL,CAApB;;AACA,QAAME,OAAO,GAAGC,KAAK,KAAK;AAAER,IAAAA,IAAI,EAAEP,YAAY,CAACG,KAArB;AAA4BY,IAAAA;AAA5B,GAAL,CAArB;;AAEA,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACL,OAAO,CAACF,KAAD,CAAR,CAAR;;AAEA,QAAIV,aAAa,CAACkB,aAAd,CAA4BR,KAA5B,EAAmCC,QAAnC,MAAiD,KAArD,EAA4D;AAC1DM,MAAAA,QAAQ,CAACF,OAAO,CAAC,kCAAD,CAAR,CAAR;AACA;AACD;;AAEDE,IAAAA,QAAQ,CAACH,OAAO,CAACJ,KAAD,CAAR,CAAR;AACD,GATD;AAUD,CAfD;;AAiBA,MAAMS,QAAQ,GAAG,CAACT,KAAD,EAAQC,QAAR,KAAqB;AACpC,QAAMC,OAAO,GAAGC,IAAI,KAAK;AAAEL,IAAAA,IAAI,EAAEF,eAAe,CAACJ,OAAxB;AAAiCW,IAAAA;AAAjC,GAAL,CAApB;;AACA,QAAMC,OAAO,GAAGD,IAAI,KAAK;AAAEL,IAAAA,IAAI,EAAEF,eAAe,CAACH,OAAxB;AAAiCU,IAAAA;AAAjC,GAAL,CAApB;;AACA,QAAME,OAAO,GAAGC,KAAK,KAAK;AAAER,IAAAA,IAAI,EAAEF,eAAe,CAACF,KAAxB;AAA+BY,IAAAA;AAA/B,GAAL,CAArB;;AAEA,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACL,OAAO,CAACF,KAAD,CAAR,CAAR;;AAEA,QAAIV,aAAa,CAACoB,gBAAd,CAA+BV,KAA/B,EAAsCC,QAAtC,MAAoD,KAAxD,EAA+D;AAC7DM,MAAAA,QAAQ,CAACA,QAAQ,CAACF,OAAO,CAAC,0BAAD,CAAR,CAAT,CAAR;AACA;AACD;;AAEDE,IAAAA,QAAQ,CAACH,OAAO,CAACJ,KAAD,CAAR,CAAR;AACD,GATD;AAUD,CAfD;;AAiBA,OAAO,MAAMW,WAAW,GAAG;AAAEZ,EAAAA,KAAF;AAASU,EAAAA,QAAT;AAAmBZ,EAAAA;AAAnB,CAApB","sourcesContent":["import userValidator from 'services/userValidator';\n\nexport const loginActions = {\n  REQUEST: 'USER_LOGIN_REQUEST',\n  SUCCESS: 'USER_LOGIN_SUCCESS',\n  ERROR: 'USER_LOGIN_ERROR',\n\n  LOGOUT: 'USER_LOGOUT'\n};\n\nexport const registerActions = {\n  REQUEST: 'USER_REGISTER_REQUEST',\n  SUCCESS: 'USER_REGISTER_SUCCESS',\n  ERROR: 'USER_REGISTER_ERROR'\n};\n\nconst logout = () => {\n  return { type: loginActions.LOGOUT };\n};\n\nconst login = (email, password) => {\n  const request = user => ({ type: loginActions.REQUEST, user });\n  const success = user => ({ type: loginActions.SUCCESS, user });\n  const failure = error => ({ type: loginActions.ERROR, error });\n\n  return dispatch => {\n    dispatch(request(email));\n\n    if (userValidator.validateLogin(email, password) === false) {\n      dispatch(failure('Neteisingi prisijungimo duomenys'));\n      return;\n    }\n\n    dispatch(success(email));\n  };\n};\n\nconst register = (email, password) => {\n  const request = user => ({ type: registerActions.REQUEST, user });\n  const success = user => ({ type: registerActions.SUCCESS, user });\n  const failure = error => ({ type: registerActions.ERROR, error });\n\n  return dispatch => {\n    dispatch(request(email));\n\n    if (userValidator.validateRegister(email, password) === false) {\n      dispatch(dispatch(failure('Laukai negali būti tušti')));\n      return;\n    }\n\n    dispatch(success(email));\n  };\n};\n\nexport const userActions = { login, register, logout };\n"]},"metadata":{},"sourceType":"module"}