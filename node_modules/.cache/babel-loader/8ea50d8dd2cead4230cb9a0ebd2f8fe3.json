{"ast":null,"code":"import _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport { Component, createElement, cloneElement } from 'react';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport _extends from '@babel/runtime/helpers/esm/extends';\n/* eslint-disable no-console */\n\nvar warn = function warn(condition, message, trace) {\n  if (trace === void 0) {\n    trace = true;\n  }\n\n  if (condition) {\n    console.warn(\"[react-powerplug]: \" + message);\n    console.trace && trace && console.trace('Trace');\n  }\n};\n\nvar isFn = function isFn(prop) {\n  return typeof prop === 'function';\n};\n/**\n * renderProps\n * is a render/children props interop.\n * will pick up the prop that was used,\n * or children if both are used\n */\n\n\nvar renderProps = function renderProps(_ref) {\n  var children = _ref.children,\n      render = _ref.render;\n\n  if (process.env.NODE_ENV !== 'production') {\n    warn(isFn(children) && isFn(render), 'You are using the children and render props together.\\n' + 'This is impossible, therefore, only the children will be used.');\n  }\n\n  var fn = isFn(children) ? children : render;\n\n  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    props[_key - 1] = arguments[_key];\n  }\n\n  return fn ? fn.apply(void 0, props) : null;\n};\n\nvar noop = function noop() {};\n\nvar Value =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Value, _Component);\n\n  function Value() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.state = {\n      value: _this.props.initial\n    };\n\n    _this._set = function (updater, cb) {\n      if (cb === void 0) {\n        cb = noop;\n      }\n\n      var _this$props$onChange = _this.props.onChange,\n          onChange = _this$props$onChange === void 0 ? noop : _this$props$onChange;\n\n      _this.setState(typeof updater === 'function' ? function (state) {\n        return {\n          value: updater(state.value)\n        };\n      } : {\n        value: updater\n      }, function () {\n        onChange(_this.state.value);\n        cb();\n      });\n    };\n\n    _this._reset = function (cb) {\n      if (cb === void 0) {\n        cb = noop;\n      }\n\n      _this._set(_this.props.initial, cb);\n    };\n\n    return _this;\n  }\n\n  var _proto = Value.prototype;\n\n  _proto.render = function render() {\n    return renderProps(this.props, {\n      value: this.state.value,\n      set: this._set,\n      reset: this._reset\n    });\n  };\n\n  return Value;\n}(Component);\n\nvar Active = function Active(_ref) {\n  var onChange = _ref.onChange,\n      props = _objectWithoutPropertiesLoose(_ref, [\"onChange\"]);\n\n  return createElement(Value, {\n    initial: false,\n    onChange: onChange\n  }, function (_ref2) {\n    var value = _ref2.value,\n        set = _ref2.set;\n    return renderProps(props, {\n      active: value,\n      bind: {\n        onMouseDown: function onMouseDown() {\n          return set(true);\n        },\n        onMouseUp: function onMouseUp() {\n          return set(false);\n        }\n      }\n    });\n  });\n};\n\nvar isElement = function isElement(element) {\n  return typeof element.type === 'function';\n};\n\nvar compose = function compose() {\n  for (var _len = arguments.length, elements = new Array(_len), _key = 0; _key < _len; _key++) {\n    elements[_key] = arguments[_key];\n  }\n\n  var reversedElements = elements.reverse();\n  return function (composedProps) {\n    // Stack children arguments recursively and pass\n    // it down until the last component that render children\n    // with these stacked arguments\n    function stackProps(i, elements, propsList) {\n      if (propsList === void 0) {\n        propsList = [];\n      }\n\n      var element = elements[i];\n      var isTheLast = i === 0; // Check if is latest component.\n      // If is latest then render children,\n      // Otherwise continue stacking arguments\n\n      var renderFn = function renderFn(props) {\n        return isTheLast ? renderProps.apply(void 0, [composedProps].concat(propsList.concat(props))) : stackProps(i - 1, elements, propsList.concat(props));\n      }; // Clone a element if it's passed created as <Element initial={} />\n      // Or create it if passed as just Element\n\n\n      var elementFn = isElement(element) ? cloneElement : createElement;\n      return elementFn(element, {}, renderFn);\n    }\n\n    return stackProps(elements.length - 1, reversedElements);\n  };\n};\n\nvar Compose = function Compose(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutPropertiesLoose(_ref, [\"components\"]);\n\n  return compose.apply(void 0, components)(props);\n};\n\nvar add = function add(amount) {\n  return function (value) {\n    return value + amount;\n  };\n};\n\nvar Counter = function Counter(_ref) {\n  var _ref$initial = _ref.initial,\n      initial = _ref$initial === void 0 ? 0 : _ref$initial,\n      onChange = _ref.onChange,\n      props = _objectWithoutPropertiesLoose(_ref, [\"initial\", \"onChange\"]);\n\n  return createElement(Value, {\n    initial: initial,\n    onChange: onChange\n  }, function (_ref2) {\n    var value = _ref2.value,\n        _set = _ref2.set,\n        reset = _ref2.reset;\n    return renderProps(props, {\n      count: value,\n      inc: function inc() {\n        return _set(add(1));\n      },\n      dec: function dec() {\n        return _set(add(-1));\n      },\n      incBy: function incBy(value) {\n        return _set(add(value));\n      },\n      decBy: function decBy(value) {\n        return _set(add(-value));\n      },\n      set: function set(value) {\n        return _set(value);\n      },\n      reset: reset\n    });\n  });\n};\n\nvar isObject = function isObject(value) {\n  return typeof value === 'object' && value;\n};\n\nvar Input = function Input(_ref) {\n  var _ref$initial = _ref.initial,\n      initial = _ref$initial === void 0 ? '' : _ref$initial,\n      onChange = _ref.onChange,\n      props = _objectWithoutPropertiesLoose(_ref, [\"initial\", \"onChange\"]);\n\n  return createElement(Value, {\n    initial: initial,\n    onChange: onChange\n  }, function (_ref2) {\n    var value = _ref2.value,\n        set = _ref2.set,\n        reset = _ref2.reset;\n    return renderProps(props, {\n      value: value,\n      reset: reset,\n      set: set,\n      bind: {\n        value: value,\n        onChange: function onChange(event) {\n          if (isObject(event) && isObject(event.target)) {\n            set(event.target.value);\n          } else {\n            set(event);\n          }\n        }\n      }\n    });\n  });\n};\n\nvar Focus = function Focus(_ref) {\n  var onChange = _ref.onChange,\n      props = _objectWithoutPropertiesLoose(_ref, [\"onChange\"]);\n\n  return createElement(Value, {\n    initial: false,\n    onChange: onChange\n  }, function (_ref2) {\n    var value = _ref2.value,\n        set = _ref2.set;\n    return renderProps(props, {\n      focused: value,\n      bind: {\n        onFocus: function onFocus() {\n          return set(true);\n        },\n        onBlur: function onBlur() {\n          return set(false);\n        }\n      }\n    });\n  });\n};\n\nvar FocusManager = function FocusManager(_ref) {\n  var onChange = _ref.onChange,\n      props = _objectWithoutPropertiesLoose(_ref, [\"onChange\"]);\n\n  var canBlur = true;\n  return createElement(Value, {\n    initial: false,\n    onChange: onChange\n  }, function (_ref2) {\n    var value = _ref2.value,\n        set = _ref2.set;\n    return renderProps(props, {\n      focused: value,\n      blur: function blur() {\n        if (value) {\n          document.activeElement.blur();\n        }\n      },\n      bind: {\n        tabIndex: -1,\n        onBlur: function onBlur() {\n          if (canBlur) {\n            set(false);\n          }\n        },\n        onFocus: function onFocus() {\n          set(true);\n        },\n        onMouseDown: function onMouseDown() {\n          canBlur = false;\n        },\n        onMouseUp: function onMouseUp() {\n          canBlur = true;\n        }\n      }\n    });\n  });\n};\n\nvar isObject$1 = function isObject(value) {\n  return typeof value === 'object' && value;\n};\n\nvar Form = function Form(_ref) {\n  var _ref$initial = _ref.initial,\n      initial = _ref$initial === void 0 ? {} : _ref$initial,\n      onChange = _ref.onChange,\n      props = _objectWithoutPropertiesLoose(_ref, [\"initial\", \"onChange\"]);\n\n  return createElement(Value, {\n    initial: _extends({}, initial),\n    onChange: onChange\n  }, function (_ref2) {\n    var values = _ref2.value,\n        set = _ref2.set,\n        reset = _ref2.reset;\n    return renderProps(props, {\n      values: values,\n      reset: reset,\n      setValues: function setValues(nextValues) {\n        return set(function (prev) {\n          return _extends({}, prev, typeof nextValues === 'function' ? nextValues(prev) : nextValues);\n        });\n      },\n      field: function field(id) {\n        var value = values[id];\n\n        var setValue = function setValue(updater) {\n          var _extends3;\n\n          return typeof updater === 'function' ? set(function (prev) {\n            var _extends2;\n\n            return _extends({}, prev, (_extends2 = {}, _extends2[id] = updater(prev[id]), _extends2));\n          }) : set(_extends({}, values, (_extends3 = {}, _extends3[id] = updater, _extends3)));\n        };\n\n        return {\n          value: value,\n          set: setValue,\n          bind: {\n            value: value,\n            onChange: function onChange(event) {\n              if (isObject$1(event) && isObject$1(event.target)) {\n                setValue(event.target.value);\n              } else {\n                setValue(event);\n              }\n            }\n          }\n        };\n      }\n    });\n  });\n};\n\nvar Hover = function Hover(_ref) {\n  var onChange = _ref.onChange,\n      props = _objectWithoutPropertiesLoose(_ref, [\"onChange\"]);\n\n  return createElement(Value, {\n    initial: false,\n    onChange: onChange\n  }, function (_ref2) {\n    var value = _ref2.value,\n        set = _ref2.set;\n    return renderProps(props, {\n      hovered: value,\n      bind: {\n        onMouseEnter: function onMouseEnter() {\n          return set(true);\n        },\n        onMouseLeave: function onMouseLeave() {\n          return set(false);\n        }\n      }\n    });\n  });\n};\n\nvar Interval =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Interval, _Component);\n\n  function Interval() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.state = {\n      times: 0\n    };\n    _this.intervalId = undefined;\n\n    _this._clearIntervalIfNecessary = function () {\n      if (_this.intervalId) {\n        _this.intervalId = clearInterval(_this.intervalId);\n      }\n    };\n\n    _this._setIntervalIfNecessary = function (delay) {\n      if (Number.isFinite(delay)) {\n        _this._clearIntervalIfNecessary();\n\n        _this.intervalId = setInterval(function () {\n          return _this.setState(function (s) {\n            return {\n              times: s.times + 1\n            };\n          });\n        }, delay);\n      }\n    };\n\n    _this.stop = function () {\n      _this._clearIntervalIfNecessary();\n    };\n\n    _this.start = function (delay) {\n      var _delay = typeof delay === 'number' ? delay : _this.props.delay != null ? _this.props.delay : 1000;\n\n      _this._setIntervalIfNecessary(_delay);\n    };\n\n    _this.toggle = function () {\n      _this.intervalId ? _this.stop() : _this.start();\n    };\n\n    return _this;\n  }\n\n  var _proto = Interval.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.start();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (prevProps.delay !== this.props.delay) {\n      this.stop();\n      this.start();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.stop();\n  };\n\n  _proto.render = function render() {\n    return renderProps(this.props, {\n      start: this.start,\n      stop: this.stop,\n      toggle: this.toggle\n    });\n  };\n\n  return Interval;\n}(Component);\n\nvar complement = function complement(fn) {\n  return function () {\n    return !fn.apply(void 0, arguments);\n  };\n};\n\nvar List = function List(_ref) {\n  var _ref$initial = _ref.initial,\n      initial = _ref$initial === void 0 ? [] : _ref$initial,\n      onChange = _ref.onChange,\n      props = _objectWithoutPropertiesLoose(_ref, [\"initial\", \"onChange\"]);\n\n  return createElement(Value, {\n    initial: initial,\n    onChange: onChange\n  }, function (_ref2) {\n    var value = _ref2.value,\n        _set = _ref2.set,\n        reset = _ref2.reset;\n    return renderProps(props, {\n      list: value,\n      first: function first() {\n        return value[0];\n      },\n      last: function last() {\n        return value[Math.max(0, value.length - 1)];\n      },\n      set: function set(list) {\n        return _set(list);\n      },\n      push: function push() {\n        for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n          values[_key] = arguments[_key];\n        }\n\n        return _set(function (list) {\n          return list.concat(values);\n        });\n      },\n      pull: function pull(predicate) {\n        return _set(function (list) {\n          return list.filter(complement(predicate));\n        });\n      },\n      sort: function sort(compareFn) {\n        return _set(function (list) {\n          return list.concat().sort(compareFn);\n        });\n      },\n      reset: reset\n    });\n  });\n};\n\nvar Map = function Map(_ref) {\n  var _ref$initial = _ref.initial,\n      initial = _ref$initial === void 0 ? {} : _ref$initial,\n      onChange = _ref.onChange,\n      props = _objectWithoutPropertiesLoose(_ref, [\"initial\", \"onChange\"]);\n\n  return createElement(Value, {\n    initial: _extends({}, initial),\n    onChange: onChange\n  }, function (_ref2) {\n    var values = _ref2.value,\n        _set = _ref2.set,\n        reset = _ref2.reset;\n    return renderProps(props, {\n      values: values,\n      clear: function clear() {\n        return _set({});\n      },\n      reset: reset,\n      set: function set(key, updater) {\n        return _set(function (prev) {\n          var _extends2;\n\n          return _extends({}, prev, (_extends2 = {}, _extends2[key] = typeof updater === 'function' ? updater(prev[key]) : updater, _extends2));\n        });\n      },\n      get: function get(key) {\n        return values[key];\n      },\n      has: function has(key) {\n        return values[key] != null;\n      },\n      delete: function _delete(key) {\n        return _set(function (_ref3) {\n          var deleted = _ref3[key],\n              prev = _objectWithoutPropertiesLoose(_ref3, [key]);\n\n          return prev;\n        });\n      }\n    });\n  });\n};\n\nvar unique = function unique(arr) {\n  return arr.filter(function (d, i) {\n    return arr.indexOf(d) === i;\n  });\n};\n\nvar hasItem = function hasItem(arr, item) {\n  return arr.indexOf(item) !== -1;\n};\n\nvar removeItem = function removeItem(arr, item) {\n  return hasItem(arr, item) ? arr.filter(function (d) {\n    return d !== item;\n  }) : arr;\n};\n\nvar addUnique = function addUnique(arr, item) {\n  return hasItem(arr, item) ? arr : arr.concat([item]);\n};\n\nvar Set = function Set(_ref) {\n  var _ref$initial = _ref.initial,\n      initial = _ref$initial === void 0 ? [] : _ref$initial,\n      onChange = _ref.onChange,\n      props = _objectWithoutPropertiesLoose(_ref, [\"initial\", \"onChange\"]);\n\n  return createElement(Value, {\n    initial: unique(initial),\n    onChange: onChange\n  }, function (_ref2) {\n    var value = _ref2.value,\n        set = _ref2.set,\n        reset = _ref2.reset;\n    return renderProps(props, {\n      values: value,\n      add: function add(key) {\n        return set(function (values) {\n          return addUnique(values, key);\n        });\n      },\n      clear: function clear() {\n        return set([]);\n      },\n      remove: function remove(key) {\n        return set(function (values) {\n          return removeItem(values, key);\n        });\n      },\n      has: function has(key) {\n        return hasItem(value, key);\n      },\n      reset: reset\n    });\n  });\n};\n\nvar State = function State(_ref) {\n  var _ref$initial = _ref.initial,\n      initial = _ref$initial === void 0 ? {} : _ref$initial,\n      onChange = _ref.onChange,\n      props = _objectWithoutPropertiesLoose(_ref, [\"initial\", \"onChange\"]);\n\n  return createElement(Value, {\n    initial: initial,\n    onChange: onChange\n  }, function (_ref2) {\n    var value = _ref2.value,\n        set = _ref2.set,\n        reset = _ref2.reset;\n    return renderProps(props, {\n      state: value,\n      setState: function setState(updater, cb) {\n        return set(function (prev) {\n          return _extends({}, prev, typeof updater === 'function' ? updater(prev) : updater);\n        }, cb);\n      },\n      resetState: reset\n    });\n  });\n};\n\nvar Toggle = function Toggle(_ref) {\n  var _ref$initial = _ref.initial,\n      initial = _ref$initial === void 0 ? false : _ref$initial,\n      onChange = _ref.onChange,\n      props = _objectWithoutPropertiesLoose(_ref, [\"initial\", \"onChange\"]);\n\n  return createElement(Value, {\n    initial: initial,\n    onChange: onChange\n  }, function (_ref2) {\n    var value = _ref2.value,\n        _set = _ref2.set,\n        reset = _ref2.reset;\n    return renderProps(props, {\n      on: value,\n      set: function set(value) {\n        return _set(value);\n      },\n      reset: reset,\n      toggle: function toggle() {\n        return _set(function (on) {\n          return !on;\n        });\n      },\n      setOn: function setOn() {\n        return _set(true);\n      },\n      setOff: function setOff() {\n        return _set(false);\n      }\n    });\n  });\n};\n\nvar Touch = function Touch(_ref) {\n  var onChange = _ref.onChange,\n      props = _objectWithoutPropertiesLoose(_ref, [\"onChange\"]);\n\n  return createElement(Value, {\n    initial: false,\n    onChange: onChange\n  }, function (_ref2) {\n    var value = _ref2.value,\n        set = _ref2.set;\n    return renderProps(props, {\n      touched: value,\n      bind: {\n        onTouchStart: function onTouchStart() {\n          return set(true);\n        },\n        onTouchEnd: function onTouchEnd() {\n          return set(false);\n        }\n      }\n    });\n  });\n};\n\nvar composeEvents = function composeEvents() {\n  for (var _len = arguments.length, objEvents = new Array(_len), _key = 0; _key < _len; _key++) {\n    objEvents[_key] = arguments[_key];\n  }\n\n  return objEvents.reverse().reduce(function (allEvents, events) {\n    var append = {};\n\n    var _loop = function _loop(key) {\n      append[key] = allEvents[key] ? // Already have this event: let's merge\n      function () {\n        events[key].apply(events, arguments);\n        allEvents[key].apply(allEvents, arguments);\n      } : // Don't have this event yet: just assign the event\n      events[key];\n    };\n\n    for (var key in events) {\n      _loop(key);\n    }\n\n    return _extends({}, allEvents, append);\n  });\n};\n\nexport { Active, Compose, Counter, Input as Field, Focus, FocusManager as unstable_FocusManager, Form, Hover, Interval, List, Map, Set, State, Toggle, Touch, Value, compose, composeEvents, renderProps };","map":null,"metadata":{},"sourceType":"module"}