{"ast":null,"code":"var _jsxFileName = \"/home/ruta/Documents/my_websites/auction/src/containers/RegisterUser.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport RegisterForm from '../components/Account/RegisterForm';\nimport EmailInput from '../components/Account/EmailInput';\nimport PasswordInput from '../components/Account/PasswordInput';\nimport { userActions } from '../actions';\nimport AgreeWithPoliciesCheckbox from '../components/Account/AgreeWithPoliciesCheckbox';\nimport WizardPage from '../components/Wizard/WizardPage';\nimport SimpleTextField from '../components/Account/SimpleTextField'; // @todo clean this file. Requires a little bit of refactor.\n// @todo show errors on clicking next (if there are some in the first page).\n// @todo probably remove RegisterForm component (cuz it doesn't handle anything and is useless).\n\nclass RegisterUser extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      name: '',\n      surname: '',\n      repeatPassword: '',\n      agreeWithPolicies: false,\n      submitted: false,\n      currentPage: 1\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handlePolicies = this.handlePolicies.bind(this);\n    this.nextPage = this.nextPage.bind(this);\n    this.prevPage = this.prevPage.bind(this);\n  }\n\n  handleChange(e) {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  nextPage() {\n    const currentPage = this.state.currentPage;\n    this.setState({\n      currentPage: currentPage + 1\n    });\n  }\n\n  prevPage() {\n    const currentPage = this.state.currentPage;\n    this.setState({\n      currentPage: currentPage - 1\n    });\n  }\n\n  handlePolicies() {\n    const agreeWithPolicies = this.state.agreeWithPolicies;\n    this.setState({\n      agreeWithPolicies: !agreeWithPolicies\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.setState({\n      submitted: true\n    });\n    const dispatch = this.props.dispatch;\n    const _this$state = this.state,\n          email = _this$state.email,\n          password = _this$state.password;\n    dispatch(userActions.register(email, password));\n    this.nextPage();\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          submitted = _this$state2.submitted,\n          email = _this$state2.email,\n          password = _this$state2.password,\n          repeatPassword = _this$state2.repeatPassword,\n          agreeWithPolicies = _this$state2.agreeWithPolicies,\n          currentPage = _this$state2.currentPage,\n          name = _this$state2.name,\n          surname = _this$state2.surname;\n    const _this$props = this.props,\n          processing = _this$props.processing,\n          error = _this$props.error,\n          success = _this$props.success;\n    return React.createElement(RegisterForm, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Form state status:\", processing && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Processing\") || error && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Error\") || success && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Success\"), React.createElement(WizardPage, {\n      currentId: currentPage,\n      pageId: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(EmailInput, {\n      onChange: this.handleChange,\n      submitted: submitted,\n      value: email,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(PasswordInput, {\n      onChange: this.handleChange,\n      submitted: submitted,\n      value: password,\n      name: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(PasswordInput, {\n      onChange: this.handleChange,\n      submitted: submitted,\n      value: repeatPassword,\n      name: \"repeatPassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(AgreeWithPoliciesCheckbox, {\n      onChange: this.handlePolicies,\n      checked: agreeWithPolicies,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"button\",\n      onClick: this.nextPage,\n      variant: \"contained\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"T\\u0119sti\")), React.createElement(WizardPage, {\n      currentId: currentPage,\n      pageId: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(SimpleTextField, {\n      onChange: this.handleChange,\n      label: \"Vardas\",\n      submitted: submitted,\n      name: \"name\",\n      value: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(SimpleTextField, {\n      onChange: this.handleChange,\n      submitted: submitted,\n      label: \"Pavard\\u0117\",\n      name: \"surname\",\n      value: surname,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"button\",\n      onClick: this.prevPage,\n      variant: \"contained\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Atgal\"), React.createElement(Button, {\n      style: {\n        marginLeft: 15\n      },\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Registruotis\")), React.createElement(WizardPage, {\n      currentId: currentPage,\n      pageId: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"A\\u010Di\\u016B u\\u017E registracija. I\\u0161siunt\\u0117me el. lai\\u0161k\\u0105 su patvirtinimu. Patvirtin\\u0119 el. lai\\u0161k\\u0105 galite prisijungti prie sistemos.\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  const _state$userRegistrati = state.userRegistration,\n        processing = _state$userRegistrati.processing,\n        success = _state$userRegistrati.success,\n        error = _state$userRegistrati.error,\n        nextPage = _state$userRegistrati.nextPage;\n  return {\n    processing,\n    success,\n    error,\n    nextPage\n  };\n};\n\nRegisterUser.defaultProps = {\n  processing: false,\n  error: null,\n  success: false\n};\nRegisterUser.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  processing: PropTypes.bool,\n  error: PropTypes.string,\n  success: PropTypes.bool\n};\nexport default connect(mapStateToProps)(RegisterUser);","map":{"version":3,"sources":["/home/ruta/Documents/my_websites/auction/src/containers/RegisterUser.jsx"],"names":["React","connect","PropTypes","Button","RegisterForm","EmailInput","PasswordInput","userActions","AgreeWithPoliciesCheckbox","WizardPage","SimpleTextField","RegisterUser","Component","constructor","props","state","email","password","name","surname","repeatPassword","agreeWithPolicies","submitted","currentPage","handleChange","bind","handleSubmit","handlePolicies","nextPage","prevPage","e","target","value","setState","preventDefault","dispatch","register","render","processing","error","success","marginLeft","mapStateToProps","userRegistration","defaultProps","propTypes","func","isRequired","bool","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport RegisterForm from '../components/Account/RegisterForm';\nimport EmailInput from '../components/Account/EmailInput';\nimport PasswordInput from '../components/Account/PasswordInput';\nimport { userActions } from '../actions';\nimport AgreeWithPoliciesCheckbox from '../components/Account/AgreeWithPoliciesCheckbox';\nimport WizardPage from '../components/Wizard/WizardPage';\nimport SimpleTextField from '../components/Account/SimpleTextField';\n\n// @todo clean this file. Requires a little bit of refactor.\n// @todo show errors on clicking next (if there are some in the first page).\n// @todo probably remove RegisterForm component (cuz it doesn't handle anything and is useless).\nclass RegisterUser extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: '',\n      name: '',\n      surname: '',\n      repeatPassword: '',\n      agreeWithPolicies: false,\n      submitted: false,\n      currentPage: 1\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handlePolicies = this.handlePolicies.bind(this);\n    this.nextPage = this.nextPage.bind(this);\n    this.prevPage = this.prevPage.bind(this);\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  nextPage() {\n    const { currentPage } = this.state;\n    this.setState({ currentPage: currentPage + 1 });\n  }\n\n  prevPage() {\n    const { currentPage } = this.state;\n    this.setState({ currentPage: currentPage - 1 });\n  }\n\n  handlePolicies() {\n    const { agreeWithPolicies } = this.state;\n\n    this.setState({\n      agreeWithPolicies: !agreeWithPolicies\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    this.setState({ submitted: true });\n    const { dispatch } = this.props;\n    const { email, password } = this.state;\n\n    dispatch(userActions.register(email, password));\n\n    this.nextPage();\n  }\n\n  render() {\n    const {\n      submitted,\n      email,\n      password,\n      repeatPassword,\n      agreeWithPolicies,\n      currentPage,\n      name,\n      surname\n    } = this.state;\n    const { processing, error, success } = this.props;\n\n    return (\n      <RegisterForm onSubmit={this.handleSubmit}>\n        Form state status:\n        {(processing && <span>Processing</span>) ||\n          (error && <span>Error</span>) ||\n          (success && <span>Success</span>)}\n        <WizardPage currentId={currentPage} pageId={1}>\n          <EmailInput onChange={this.handleChange} submitted={submitted} value={email} />\n          <PasswordInput\n            onChange={this.handleChange}\n            submitted={submitted}\n            value={password}\n            name=\"password\"\n          />\n          <PasswordInput\n            onChange={this.handleChange}\n            submitted={submitted}\n            value={repeatPassword}\n            name=\"repeatPassword\"\n          />\n          <AgreeWithPoliciesCheckbox onChange={this.handlePolicies} checked={agreeWithPolicies} />\n          <br />\n          <Button type=\"button\" onClick={this.nextPage} variant=\"contained\" color=\"primary\">\n            Tęsti\n          </Button>\n        </WizardPage>\n        <WizardPage currentId={currentPage} pageId={2}>\n          <SimpleTextField\n            onChange={this.handleChange}\n            label=\"Vardas\"\n            submitted={submitted}\n            name=\"name\"\n            value={name}\n          />\n          <SimpleTextField\n            onChange={this.handleChange}\n            submitted={submitted}\n            label=\"Pavardė\"\n            name=\"surname\"\n            value={surname}\n          />\n          <Button type=\"button\" onClick={this.prevPage} variant=\"contained\" color=\"primary\">\n            Atgal\n          </Button>\n          <Button style={{ marginLeft: 15 }} type=\"submit\" variant=\"contained\" color=\"secondary\">\n            Registruotis\n          </Button>\n        </WizardPage>\n        <WizardPage currentId={currentPage} pageId={3}>\n          Ačiū už registracija. Išsiuntėme el. laišką su patvirtinimu. Patvirtinę el. laišką galite\n          prisijungti prie sistemos.\n        </WizardPage>\n      </RegisterForm>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { processing, success, error, nextPage } = state.userRegistration;\n\n  return { processing, success, error, nextPage };\n};\n\nRegisterUser.defaultProps = {\n  processing: false,\n  error: null,\n  success: false\n};\n\nRegisterUser.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  processing: PropTypes.bool,\n  error: PropTypes.string,\n  success: PropTypes.bool\n};\n\nexport default connect(mapStateToProps)(RegisterUser);\n"]},"metadata":{},"sourceType":"module"}