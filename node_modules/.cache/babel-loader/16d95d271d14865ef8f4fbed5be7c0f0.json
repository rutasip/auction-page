{"ast":null,"code":"import * as React from \"react\";\nexport default class ProgressiveImage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.loadImageFromCache = (src, placeholder) => {\n      if (src) {\n        this.loadImage(src);\n        this.timer = setTimeout(() => {\n          if (this.state.image !== src) {\n            this.setState({\n              image: placeholder,\n              loading: true\n            });\n          }\n        }, 100);\n      }\n    };\n\n    this.loadImage = src => {\n      // If there is already an image we nullify the onload\n      // and onerror props so it does not incorrectly set state\n      // when it resolves\n      if (this.image) {\n        this.image.onload = null;\n        this.image.onerror = null;\n      }\n\n      const image = new Image();\n      this.image = image;\n      image.onload = this.onLoad;\n      image.onerror = this.onError;\n      image.src = src;\n    };\n\n    this.onLoad = () => {\n      // use this.image.src instead of this.props.src to\n      // avoid the possibility of props being updated and the\n      // new image loading before the new props are available as\n      // this.props.\n      this.setState({\n        image: this.image.src,\n        loading: false\n      });\n    };\n\n    this.onError = errorEvent => {\n      const onError = this.props.onError;\n\n      if (onError) {\n        onError(errorEvent);\n      }\n    };\n\n    this.state = {\n      image: \"\",\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          src = _this$props.src,\n          placeholder = _this$props.placeholder;\n    this.loadImageFromCache(src, placeholder);\n  }\n\n  componentDidUpdate(prevProps) {\n    const _this$props2 = this.props,\n          src = _this$props2.src,\n          placeholder = _this$props2.placeholder; // We only invalidate the current image if the src has changed.\n\n    if (src !== prevProps.src) {\n      this.loadImageFromCache(src, placeholder);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.image) {\n      this.image.onload = null;\n      this.image.onerror = null;\n    }\n\n    clearTimeout(this.timer);\n  }\n\n  render() {\n    const _this$state = this.state,\n          image = _this$state.image,\n          loading = _this$state.loading;\n    const children = this.props.children;\n    return React.Children.only(children(image, loading));\n  }\n\n}","map":{"version":3,"sources":["/home/ruta/Documents/my_websites/auction/src/components/Item/ItemOverview/ProgressiveImage.js"],"names":["React","ProgressiveImage","Component","constructor","props","loadImageFromCache","src","placeholder","loadImage","timer","setTimeout","state","image","setState","loading","onload","onerror","Image","onLoad","onError","errorEvent","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","clearTimeout","render","children","Children","only"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from \"react\";\n\nexport default class ProgressiveImage extends React.Component {\n  image;\n  timer;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: \"\",\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    const { src, placeholder } = this.props;\n    this.loadImageFromCache(src, placeholder);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { src, placeholder } = this.props;\n    // We only invalidate the current image if the src has changed.\n    if (src !== prevProps.src) {\n      this.loadImageFromCache(src, placeholder);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.image) {\n      this.image.onload = null;\n      this.image.onerror = null;\n    }\n    clearTimeout(this.timer);\n  }\n\n  loadImageFromCache = (src, placeholder) => {\n    if (src) {\n      this.loadImage(src);\n\n      this.timer = setTimeout(() => {\n        if (this.state.image !== src) {\n          this.setState({ image: placeholder, loading: true });\n        }\n      }, 100);\n    }\n  };\n\n  loadImage = src => {\n    // If there is already an image we nullify the onload\n    // and onerror props so it does not incorrectly set state\n    // when it resolves\n    if (this.image) {\n      this.image.onload = null;\n      this.image.onerror = null;\n    }\n    const image = new Image();\n    this.image = image;\n    image.onload = this.onLoad;\n    image.onerror = this.onError;\n    image.src = src;\n  };\n\n  onLoad = () => {\n    // use this.image.src instead of this.props.src to\n    // avoid the possibility of props being updated and the\n    // new image loading before the new props are available as\n    // this.props.\n    this.setState({\n      image: this.image.src,\n      loading: false\n    });\n  };\n\n  onError = errorEvent => {\n    const { onError } = this.props;\n    if (onError) {\n      onError(errorEvent);\n    }\n  };\n\n  render() {\n    const { image, loading } = this.state;\n    const { children } = this.props;\n\n    return React.Children.only(children(image, loading));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}